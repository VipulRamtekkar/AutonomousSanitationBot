import cv2
import numpy as np 
import time 
import RPi.GPIO as GPIO 
import pserial 
import picamera 
from tb_ip import *
import math 
import serial
import struct

camera=picamera.PiCamera()



# initializing the camera 
def startcam():
	camera.start_preview()
	time.sleep(1)

def right_rotation(): 	                # .2.0.0.1.time.  ( time to angle mapping)
	
		
def left_rotation():			# .2.0.0.2.time. 
					
def move_forward():                     # .1.1.90>.0.0. : continously move forwad at max speed .1.1.<90.0.0. : ultrasonic on now and move according to it .1.2.0.0.0 increment in forward  

def move_backward():			# .1.3.0.0.0 

def lift_arm(angle):
#Start the serial port to communicate with arduino
	data = serial.Serial('com3',9600, timeout=1)
  
#now we made an infinite while loop to keep the program running
	
	pos = angle
	data.write(struct.pack('>B',pos))
	return null  #code and send the angle to the Arduino through serial port

def open_water():
	data = serial.Serial('com4',9600, timeout=1)

#now we made an infinite while loop to keep the program running
	
	pos =180                         
	data.write(struct.pack('>B',pos))
	time.sleep(1)
	pos=90
	data.write(struct.pack('>B',pos))
	return null

def captureImg():                         # the entire patch goes in the while loop for iteration 
    camera.capture('runimg.jpg')
    img = cv2.imread('runimg.jpg', 1)
    return img

def stopCam():               # stoping the preview of the camera
	camera.stop_preview()

def distance_estimate(c): #takes in contours 
	'''
	def find_marker(image):
		gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
		gray = cv2.GaussianBlur(gray, (5, 5), 0)
		edged = cv2.Canny(gray, 35, 125)
		(cnts, _) = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
		c = max(cnts, key = cv2.contourArea)
		cv2.imshow("edged",edged)
		return cv2.minAreaRect(c)
		'''

	def distance_to_camera(knownWidth, focalLength, perWidth):
		return (knownWidth * focalLength) / perWidth

	marker=cv2.minAreaRect(c)
	KNOWN_DISTANCE = 12.0
	KNOWN_WIDTH = 11.0

	#marker = find_marker(image)
	focalLength = (marker[1][0] * KNOWN_DISTANCE) / KNOWN_WIDTH
	#for imagePath in IMAGE_PATHS:
	#image = cv2.imread(imagePath)
	#marker = find_marker(image)
	inches = distance_to_camera(KNOWN_WIDTH, focalLength, marker[1][0])
	
	return inches 
	'''
	box = np.int0(cv2.cv.BoxPoints(marker))
	cv2.drawContours(image, [box], -1, (0, 255, 0), 2)
	cv2.putText(image, "%.2fft" % (inches / 12),
		(image.shape[1] - 200, image.shape[0] - 20), cv2.FONT_HERSHEY_SIMPLEX,
		2.0, (0, 255, 0), 3)
	cv2.imshow("image", image)
	cv2.waitKey(0)
	'''
if __name__="__main__":

	start_time=time.time()
	startcam()         # the stains code patch will run for about 420 seconds and then the second patch will start 

	while ((time.time()-start_time) < 420):
		im=captureImg()
		#now the image has been captured which needs to be processed for the 
		#stain detection 
		mask=yellow_detect(im)
		#the contour detection        
		#finding the center of the object detected
	while ((time.time()-start_time) < 420):
		#trash picking 
		im=captureImg()
		#now filter the trash pieces out of the image 
		#find the center of the trash piece
		while not contourDetect():
			#keep turning 
		#Now the object has been detected 
		#get the distance estimate 
		#open the servo flap

	while ((time.time()-start_time) < 420):
		#toilet detection 
		#find the contour of the toilet
		while not contourDetect():
			#keep turning 
		#Now the object has been detected 
		#get the distance estimate 
	#to return to its initial posiiton the patch would be coming back directly
	#signal to take a 360degree turn and then move forward till the 
	#sonar tells to stop, would partially call for the return
	stopCam()



















